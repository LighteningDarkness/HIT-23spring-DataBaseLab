# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Major Courses\DataBase\lab\LAB2\LAB2-code\insert_new_flight.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from ui_table import table
import pymysql
import pandas as pd
from PyQt5.QtWidgets import QMessageBox
from sqlalchemy import create_engine
class InsertFlight(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1123, 832)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(240, 170, 621, 61))
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(310, 310, 81, 30))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(310, 380, 121, 30))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(310, 500, 80, 30))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(310, 440, 111, 30))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(310, 550, 141, 30))
        self.label_5.setObjectName("label_5")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(460, 310, 271, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(460, 380, 271, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(460, 440, 271, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(460, 500, 271, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(460, 550, 271, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(310, 620, 91, 16))
        self.label_6.setObjectName("label_6")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(460, 620, 271, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.commandLinkButton.setGeometry(QtCore.QRect(530, 690, 186, 41))
        self.commandLinkButton.setObjectName("commandLinkButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1123, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.commandLinkButton.clicked.connect(self.insert)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:26pt; font-weight:600;\">请输入新航班信息</span></p></body></html>"))
        self.label.setText(_translate("MainWindow", "航班号"))
        self.label_2.setText(_translate("MainWindow", "起飞机场"))
        self.label_3.setText(_translate("MainWindow", "降落机场"))
        self.label_4.setText(_translate("MainWindow", "起飞时间"))
        self.label_5.setText(_translate("MainWindow", "降落时间"))
        self.label_6.setText(_translate("MainWindow", "执飞飞机"))
        self.commandLinkButton.setText(_translate("MainWindow", "确认"))
    
    def insert(self):
        fno=self.lineEdit.text()
        departure_airport=self.lineEdit_2.text()
        achive_airport=self.lineEdit_4.text()
        ttime=self.lineEdit_3.text()
        ltime=self.lineEdit_5.text()
        planeid=self.lineEdit_6.text()
        if fno=="" or departure_airport=="" or achive_airport=="" or ttime=="" or ltime=="" or planeid=="":
            self.window=QtWidgets.QMainWindow()
            QMessageBox.warning(self.window,"ERROR","请输入非空值")
        elif len(ttime)!=4 or len(ltime)!=4:
            self.window=QtWidgets.QMainWindow()
            QMessageBox.warning(self.window,"ERROR","请输入正确形式")
        else:
            con_1 = pymysql.connect(host='localhost', port=3306, user='root', password='000000', charset='utf8',database='airlines')  # 连接数据库
            con = create_engine('mysql+pymysql://root:000000@127.0.0.1:3306/airlines')
            sql=f"select fno from flight where fno='{fno}'"
            df=pd.read_sql(sql,con)
            #flight主键检查
            if len(df)!=0:
                self.window=QtWidgets.QMainWindow()
                QMessageBox.warning(self.window,"ERROR","该航班号已存在")
            else:
                df=pd.DataFrame([[f"{fno}","计划"]],columns=["fno","state"])
                df.to_sql('flight',con=con,index=False,if_exists='append')
                #对takeoff的外键检查，下同不再赘述
                df=pd.read_sql(f"select * from airport where aname='{departure_airport}'",con) 
                if len(df)==0:
                    self.window=QtWidgets.QMainWindow()
                    QMessageBox.warning(self.window,"ERROR","不满足外键约束，插入失败")
                    cur=con_1.cursor()
                    cur.execute(f"delete from flight where fno='{fno}'")
                    con_1.commit()
                    cur.close()
                    return
                else:
                    df=pd.DataFrame([[f"{departure_airport}",f"{fno}",f"{ttime}"]],columns=["aname","fno","ttime"])
                    df.to_sql('takeoff',con=con,index=False,if_exists='append')

                df=pd.read_sql(f"select * from airport where aname='{achive_airport}'",con)
                if len(df)==0:
                    self.window=QtWidgets.QMainWindow()
                    QMessageBox.warning(self.window,"ERROR","不满足外键约束，插入失败")
                    cur=con_1.cursor()
                    cur.execute(f"delete from takeoff where fno='{fno}'")
                    cur.execute(f"delete from flight where fno='{fno}'")
                    con_1.commit()
                    cur.close()
                    return
                else:
                    df=pd.DataFrame([[f"{achive_airport}",f"{fno}",f"{ltime}"]],columns=["aname","fno","ltime"])
                    df.to_sql('landon',con=con,index=False,if_exists='append')

                df=pd.read_sql(f"select * from plane where planeid='{planeid}'",con)
                if len(df)==0:
                    self.window=QtWidgets.QMainWindow()
                    QMessageBox.warning(self.window,"ERROR","不满足外键约束，插入失败")
                    cur=con_1.cursor()
                    cur.execute(f"delete from landon where fno='{fno}'")
                    cur.execute(f"delete from takeoff where fno='{fno}'")
                    cur.execute(f"delete from flight where fno='{fno}'")
                    con_1.commit()
                    cur.close()
                    return
                else:
                    df=pd.read_sql(f"select max(exeno) as m from execute where planeid='{planeid}' group by planeid",con)
                    exeno=1 if len(df)==0 else df.iat[0,0]+1
                    df=pd.DataFrame([[f"{planeid}",f"{fno}",f"{exeno}"]],columns=["planeid","fno","exeno"])
                    df.to_sql('execute',con=con,index=False,if_exists='append')
                
                IATA=fno[0:2]
                df=pd.read_sql(f"select * from company where IATA='{IATA}'",con)
                if len(df)==0:
                    self.window=QtWidgets.QMainWindow()
                    QMessageBox.warning(self.window,"ERROR","不满足外键约束，插入失败")
                    cur=con_1.cursor()
                    cur.execute(f"delete from execute where fno='{fno}'")
                    cur.execute(f"delete from landon where fno='{fno}'")
                    cur.execute(f"delete from takeoff where fno='{fno}'")
                    cur.execute(f"delete from flight where fno='{fno}'")
                    con_1.commit()
                    cur.close()
                    return
                else:
                    df=pd.DataFrame([[f"{IATA}",f"{fno}"]],columns=["IATA","fno"])
                    df.to_sql('setup',con=con,index=False,if_exists='append')
                self.window=QtWidgets.QMainWindow()
                QMessageBox.information(self.window,"success","插入成功！")
                con_1.close()
                







